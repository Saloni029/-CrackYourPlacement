APPROACH 1 
class Solution {
public:
    int mod = 1e9 + 7 ;
    vector<vector<int>>adj = {{4, 6}, {6, 8}, {7, 9}, {4, 8}, {3, 9, 0}, {}, {1, 7, 0}, {2, 6}, {1, 3}, {2, 4}} ; 
    int solve(int digits, int cell, vector<vector<int>>& dp){
        if(digits == 0) return 1 ;
        
        if(dp[digits][cell]!=-1) return dp[digits][cell] ;

        int ans = 0 ;
        for(auto& i:adj[cell]){
            ans = (ans + solve(digits-1, i, dp))%mod ;
        }
        
        return dp[digits][cell] = ans ;
    }

    int knightDialer(int n) {
        int ans = 0 ;
        vector<vector<int>>dp(n, vector<int>(10, -1)) ;
        for(int cell=0 ; cell<=9 ; cell++){
            ans = (ans + solve(n-1, cell, dp))%mod ;
        }
        return ans ;
    }
};


APPROACH 2
class Solution {
public:
    int mod = 1e9 + 7 ;
    vector<vector<int>>adj = {{4, 6}, {6, 8}, {7, 9}, {4, 8}, {3, 9, 0}, {}, {1, 7, 0}, {2, 6}, {1, 3}, {2, 4}} ; 
   
    int knightDialer(int n) {
        int ans = 0 ;
        vector<vector<int>>dp(n+1, vector<int>(10, 0)) ;
        for(int cell=0 ; cell<=9 ; cell++){
            dp[0][cell] = 1 ;
        }
        for(int digits=1 ; digits<n ; digits++){
            for(int cell=9 ; cell>=0 ; cell--){
                int ans1 = 0 ;
                for(auto& i:adj[cell]){
                    ans1 = (ans1 + dp[digits-1][i])%mod ;
                }
                dp[digits][cell] = ans1 ;
            }
        }

        for(int cell=0 ; cell<=9 ; cell++){
            ans = (ans + dp[n-1][cell])%mod ;
        }
        return ans ;
    }
};


APPROACH 3
class Solution {
public:
    int mod = 1e9 + 7 ;
    vector<vector<int>>adj = {{4, 6}, {6, 8}, {7, 9}, {4, 8}, {3, 9, 0}, {}, {1, 7, 0}, {2, 6}, {1, 3}, {2, 4}} ; 

    int knightDialer(int n) {
        int ans = 0 ;
        vector<int>prev(10, 1) ;
        for(int digits=1 ; digits<n ; digits++){
            vector<int>curr(10, 0) ;
            for(int cell=9 ; cell>=0 ; cell--){
                int ans1 = 0 ;
                for(auto& i:adj[cell]){
                    ans1 = (ans1 + prev[i])%mod ;
                }
                curr[cell] = ans1 ;
            }
            prev = curr ; 
        }

        for(int cell=0 ; cell<=9 ; cell++){
            ans = (ans + prev[cell])%mod ;
        }
        return ans ;
    }
};
