APPROACH 1 
class Solution {
public:
    void solve(int r, int c, vector<vector<int>>& vis, vector<vector<char>>& grid){
        vis[r][c] = 1 ;
        vector<int>dir = {0, -1, 0, 1, 0} ;
        for(int i=0 ; i<4 ; i++){
            int row = dir[i] + r ;
            int col = dir[i+1] + c ;
            if(row >=0 && row<grid.size() && col >= 0 && col<grid[0].size() && !vis[row][col] && grid[row][col]=='1'){
                solve(row, col, vis, grid) ;
            }
        }
    }
    int numIslands(vector<vector<char>>& grid) {
        int n = grid.size(), m = grid[0].size(), cnt=0 ;
        vector<vector<int>>vis(n, vector<int>(m, 0)) ;
        for(int i=0 ; i<n ; i++){
            for(int j=0 ; j<m ; j++){
                if(!vis[i][j] && grid[i][j]=='1'){
                    solve(i, j, vis, grid) ;
                    cnt++ ;
                }
            }
        }
        return cnt ;
    }
};

TC - O(V+E) 
SC - O(1)
