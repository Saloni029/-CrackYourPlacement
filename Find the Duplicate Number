APPROACH 1 
class Solution {
public:
    int findDuplicate(vector<int>& nums) {
        sort(nums.begin(), nums.end()) ;
        for(int i=0 ; i<nums.size()-1 ; i++){
            if(nums[i]==nums[i+1]) return nums[i] ;
        }
        return 0 ;
    }
};
TC - O(NLOGN)
SC - 0(1)



APPROACH 2
class Solution {
public:
    int findDuplicate(vector<int>& nums) {
        unordered_map<int,int>m ;
        for(int i=0 ; i<nums.size() ; i++){
            m[nums[i]]++ ;
        }

        for(auto i:m){
            if(i.second > 1) return i.first ;
        }
        return 0 ;
    }
};
TC - O(N)
SC - O(N)



APPROACH 3
class Solution {
public:
    int findDuplicate(vector<int>& nums) {
        int slow = nums[0] ;
        int fast = nums[0] ; 
        
        do{
            slow = nums[slow] ;
            fast = nums[nums[fast]] ;
        } while(slow != fast) ;

        fast = nums[0] ;
        while(slow != fast){
            slow = nums[slow] ;
            fast = nums[fast] ;
        }

        return slow ;
    }
};
TC - 0(N)
SC - 0(1)
