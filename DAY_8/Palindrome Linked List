class Solution {
public:
    ListNode* reverse(ListNode* head){
        if(head == NULL || head->next == NULL) return head ;
        ListNode* newhead = reverse(head -> next) ;
        ListNode* front = head -> next ;
        front -> next = head ;
        head -> next = NULL ;
        return newhead ;
    }
    bool isPalindrome(ListNode* head){
        if(head == NULL || head->next==NULL) return true ;
        ListNode* slow = head ;
        ListNode* fast = head ;
        while(fast -> next != NULL && fast -> next -> next != NULL){
            slow = slow -> next ;
            fast = fast -> next ;
            if(fast) fast = fast -> next ;
        }
        
        ListNode* temp1 = reverse(slow->next) ;
        ListNode* temp2 = head ;
        while(temp1 != NULL){
            if(temp1 -> val != temp2 -> val){
                reverse(temp1) ;
                return false ;
            }
            temp1 = temp1 -> next ;
            temp2 = temp2 -> next ;
        }
        reverse(temp1) ;
        return true ;
    }
};

TC - O(2N)
SC - O(1)
