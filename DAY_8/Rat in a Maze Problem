class Solution {
  public:
    void solve(int r, int c, vector<vector<int>> &mat, vector<vector<int>> &vis, string ans, vector<string>&ans1){
        if(r == mat.size()-1 && c == mat[0].size()-1){
            ans1.push_back(ans) ;
            return ;
        }
        
        if(c-1 >= 0 && !vis[r][c-1] && mat[r][c-1]==1){
            vis[r][c] = 1 ;
            solve(r, c-1, mat, vis, ans+'L', ans1) ;
            vis[r][c] = 0 ;
        }
        
        if(c+1 < mat[0].size() && !vis[r][c+1] && mat[r][c+1]==1){
            vis[r][c] = 1 ;
            solve(r, c+1, mat, vis, ans+'R', ans1) ;
            vis[r][c] = 0 ;
        }
        
        if(r-1 >= 0 && !vis[r-1][c] && mat[r-1][c]==1){
            vis[r][c] = 1 ;
            solve(r-1, c, mat, vis, ans+'U', ans1) ;
            vis[r][c] = 0 ;
        }
        
        if(r+1 < mat.size() && !vis[r+1][c] && mat[r+1][c]==1){
            vis[r][c] = 1 ;
            solve(r+1, c, mat, vis, ans+'D', ans1) ;
            vis[r][c] = 0 ;
        }
        
    }
    vector<string> findPath(vector<vector<int>> &mat) {
        vector<string>ans; string ans1 ;
        if(mat[0][0]==0) return ans ;
        int n = mat.size(), m = mat[0].size() ;
        vector<vector<int>>vis(n, vector<int>(m, 0)) ;
        solve(0, 0, mat, vis, ans1, ans) ;
        return ans ;
    }
};

TC - O(4^(N*M))
SC - O(N*M)
