APPROACH 1

class Solution {
public:
    int climbStairs(int n) {
        if(n==0 || n==1) return 1 ;
        return climbStairs(n-1) +  climbStairs(n-2) ;
    }
};
TC - O(exponential)

APPROACH 2

class Solution {
public:
    int solve(int i, vector<int>&dp){
        if(i==0 || i==1) return 1 ;
        if(dp[i]!=-1) return dp[i] ;
        return dp[i] = solve(i-1, dp) +  solve(i-2, dp) ;
    }
    int climbStairs(int n) {
        vector<int>dp(n+1, -1) ;
        return solve(n, dp) ;
    }
};
TC - O(N)
SC - O(N) 

APPROACH 3

class Solution {
public:
    int climbStairs(int n) {
        vector<int>dp(n+1, -1) ;
        dp[0] = 1, dp[1] = 1 ;
        for(int i=2 ; i<=n ; i++){
            dp[i] = dp[i-1] + dp[i-2] ;
        }
        return dp[n] ;
    }
};

TC - O(N)
SC - O(N) 
